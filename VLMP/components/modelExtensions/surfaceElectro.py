from VLMP.components.modelExtensions import modelExtensionBase
import numpy as np

class surfaceElectro(modelExtensionBase):
    """
    {
        "author": "Salvatore Assenza",
        "description": "Adds the electrostatic potential generated by an uniformely-charged surface (Gouy-Chapman)",
        "parameters": {
            "surfacePosition": {"description": "Z-coordinate of the surface", "type": "float", "default": 0.0},
            "chargeDensity": {"description": "density of charges on surface (units: length^-2)", "type": "float", "default": -0.0218 (angstrom^-2 for mica)},
            "ionicStrength": {"description": "ionic strength of the solution (units: mM)", "type": "float", "default": 150 mM}
        },
        "selections": {
            "selection": {"description": "Particles interacting with the surface", "type": "list of ids"}
        },
        "example": "
        {
            \"type\": \"surface\",
            \"parameters\": {
                \"surfacePosition\": -10.0,
                \"chargeDensity\": 0.010,
                \"ionicStrength\": 50.0,
                \"selection\": \"model1 all\"
            }
        }"
    }
    """

    availableParameters = {"surfacePosition", "chargeDensity", "ionicStrength"}
    requiredParameters  = set()
    availableSelections = {"selection"}
    requiredSelections  = set()

    def __init__(self,name,**params):
        super().__init__(_type = self.__class__.__name__,
                         _name = name,
                         availableParameters = self.availableParameters,
                         requiredParameters  = self.requiredParameters,
                         availableSelections = self.availableSelections,
                         requiredSelections  = self.requiredSelections,
                         **params)

        ############################################################
        ############################################################
        ############################################################

        surfacePosition = params.get("surfacePosition",0.0)
        chargeDensity = params.get("chargeDensity", -0.0218) # default value is mica (angstrom^-2)
        ionicStrength = params.get("ionicStrength", 150.0) # mM

        Tloc = self.getEnsemble().getEnsembleComponent("temperature")
        dielectricConstant = 5321./Tloc + 233.76 - 0.9297*Tloc + 0.1417*1e-2*Tloc*Tloc - 0.8292*1e-6*Tloc*Tloc*Tloc # water
        kBT = self.getUnits().getConstant("KBOLTZ")*Tloc
        bjerrumLength = 1.6e-19*1.6e-19/(4*np.pi*8.859e-12*dielectricConstant*kBT)/4186*6.022e23
        debyeLength = 1./np.sqrt(8*np.pi*bjerrumLength*6.022e23*ionicStrength)*1e10
        gouyChapmanLength = 1./(2*np.pi*bjerrumLength*np.abs(chargeDensity))*1e-10
        rrr = 1.0*gouyChapmanLength/debyeLength
        surfaceGamma = np.sqrt(rrr*rrr + 1) - rrr
        if chargeDensity < 0:
            surfaceGamma *= -1.0

        if "selection" in params:
            self.setGroup("selection")

        ############################################################

        extension = {}

        extension[name] = {}
        extension[name]["type"] = ["Surface","GouyChapman"]
        extension[name]["parameters"] = {"surfacePosition":surfacePosition, "surfaceGamma":surfaceGamma, "debyeLength":debyeLength}

        ############################################################

        self.setExtension(extension)
